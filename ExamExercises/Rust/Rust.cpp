#include <iostream>
#include <array>

using namespace std;

const size_t rows = 10;
const size_t cols = 10;

void readMatrix(char m[][cols]) {
    for (size_t i = 0; i < rows; i++) {
        for (size_t j = 0; j < cols; j++) {
            cin >> m[i][j];
        }
    }
}

void printMatrix(const char m[][cols]) {
    for (size_t i = 0; i < rows; i++) {
        for (size_t j = 0; j < cols; j++) {
            cout << m[i][j];
        }
        cout << endl;
    }
}

void spreadRust(char m[rows][cols], size_t r, size_t c) {
    if (r >= rows || c >= cols)
        return;
    if (m[r][c] == '.')
        m[r][c] = '*';
}

void processMatrix(char m[rows][cols]) {
    for (size_t r = 0; r < rows; r++) {
        for (size_t c = 0; c < cols; c++) {
            if (m[r][c] == '!') {
                spreadRust(m, r - 1, c);
                spreadRust(m, r + 1, c);
                spreadRust(m, r, c - 1);
                spreadRust(m, r, c + 1);
            }
        }
    }
}


int main()
{
    char matrix[rows][cols];

    readMatrix(matrix);

    size_t count;
    cin >> count;

    for (size_t i = 0; i < count; i++) {
        processMatrix(matrix);
        //cout << "Count: " << i << " before changing the Rs" << endl;
        //printMatrix(matrix);
        for (size_t r = 0; r < rows; r++) {
            for (size_t c = 0; c < cols; c++) {
                if (matrix[r][c] == '*')
                    matrix[r][c] = '!';
            }
        }
        //cout << "Count: " << i << " after changing the Rs" << endl;
        //printMatrix(matrix);
        //cout << "================================" << endl;
    }

    printMatrix(matrix);

    return 0;
}

/*
..........
....!.....
...###....
..........
..........
..........
..........
..........
..........
..........
5
Count: 0 before changing the Rs
....R.....
...R!R....
...###....
..........
..........
..........
..........
..........
..........
..........
Count: 0 after changing the Rs
....!.....
...!!!....
...###....
..........
..........
..........
..........
..........
..........
..........
================================
Count: 1 before changing the Rs
...R!R....
..R!!!R...
...###....
..........
..........
..........
..........
..........
..........
..........
Count: 1 after changing the Rs
...!!!....
..!!!!!...
...###....
..........
..........
..........
..........
..........
..........
..........
================================
Count: 2 before changing the Rs
..R!!!R...
.R!!!!!R..
..R###R...
..........
..........
..........
..........
..........
..........
..........
Count: 2 after changing the Rs
..!!!!!...
.!!!!!!!..
..!###!...
..........
..........
..........
..........
..........
..........
..........
================================
Count: 3 before changing the Rs
.R!!!!!R..
R!!!!!!!R.
.R!###!R..
..R...R...
..........
..........
..........
..........
..........
..........
Count: 3 after changing the Rs
.!!!!!!!..
!!!!!!!!!.
.!!###!!..
..!...!...
..........
..........
..........
..........
..........
..........
================================
Count: 4 before changing the Rs
R!!!!!!!RR >>> this is wrong, matrix[0][9] must be .
!!!!!!!!!R
R!!###!!R.
.R!R.R!R..
..R...R...
..........
..........
..........
..........
..........
Count: 4 after changing the Rs
!!!!!!!!!! >>> this is wrong, matrix[0][9] must be .
!!!!!!!!!!
!!!###!!!.
.!!!.!!!..
..!...!...
..........
..........
..........
..........
..........
================================
!!!!!!!!!!
!!!!!!!!!!
!!!###!!!.
.!!!.!!!..
..!...!...
..........
..........
..........
..........
..........
*/